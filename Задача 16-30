 #Задача 16
print("_________________________________________________")
print('Задача 16')
m=3
n=4
arr2=np.arange(m*n).reshape(m,n)
print(arr2)
k=2
L=np.vsplit(arr2,(k-1,k))
print(L)
arr3=np.vstack((L[0],L[2]))
print(arr3)

#Задача 17
print("_________________________________________________")
print('Задача 17')
arr = np.random.sample((3,4))
print(arr)
arr1=np.append(arr,[[0,0,0,0]], axis=0)
print(arr1)

#Задача 18
print("_________________________________________________")
print('Задача 18')
arr = np.random.sample((4,4))
print(arr)
arr1=np.diag(arr)
print(arr1)
sum=np.sum(arr1)
print('Сумма элементов главной диагонали=', sum)
for i in range(4):
    k=arr[i,j]
    arr[i,i]=arr[n-i-1,i]
    arr[n - i - 1, i]=k
print(arr)
arr2=np.diag(arr)
sum2=np.sum(arr2)
print('Сумма элементов побочной диагонали=', sum2)

#Задача 19
print("_________________________________________________")
print('Задача 19')
arr = np.random.sample((4,4))
print(arr)
arr2=np.diag(arr,k=1)
sum1=np.sum(arr2)
arr3=np.diag(arr, k=-1)
sum2=np.sum(arr3)
print('Сумма элементов первой диагонали=', sum1)
print('Сумма элементов второй диагонали=', sum2)

#Задача 20
print("_________________________________________________")
print('Задача 20')
arr = np.random.sample((4,4))
print(arr)
arr=np.fliplr(arr)
print(arr)
arr2=np.diag(arr,k=1)
sum1=np.sum(arr2)
arr3=np.diag(arr, k=-1)
sum2=np.sum(arr3)
print('Сумма элементов первой диагонали=', sum1)
print('Сумма элементов второй диагонали=', sum2)

#Задача 21
print("_________________________________________________")
print('Задача 21')
arr = np.random.sample((4,4))
print(arr)
arr2=np.diag(arr,k=1)
arr3=np.diag(arr, k=-1)
arrsum=(arr2+arr3)/2
print(arrsum)
arr[1,0]=arrsum[0]
arr[0,1]=arrsum[0]
arr[2,1]=arrsum[1]
arr[1,2]=arrsum[1]
arr[3,2]=arrsum[2]
arr[2,3]=arrsum[2]
print('Новая матрица')
print(arr)

#Задача 22
print("_________________________________________________")
print('Задача 22')
arr = np.random.randint(0,2, size=(3,4))
print(arr)
sum=np.sum(arr, axis=1)
print(sum)
arr1=np.where(sum%2!=0,1,0)
print(arr1)
arr=np.append(arr,[[arr1[0]],[arr1[1]],[arr1[2]]],axis=1)
print('Новая матрица')
print(arr)

#Задача 23
print("_________________________________________________")
print('Задача 23')
arr = np.random.sample((4,4))
print(arr)
arr1=np.triu(arr)
print(arr1)
sum=np.sum(arr1)
print('Сумма элементов выше главной диагонали=',sum)
arr=np.fliplr(arr)
arr1=np.triu(arr)
p=1
print(arr1)
for i in range(4):
    for j in range(4):
        if arr1[i,j]!=0:
            p=p*arr1[i,j]
print('Произведение элементов выше побочной диагонали=',p)

#Задача 24
print("_________________________________________________")
print('Задача 24')
arr = np.random.randint(0,2, size=(3,4))
print(arr)
k=2
m=2
arr2=arr[0:k,0:m]
arr3=arr[0:k,m:4]
arr4=arr[k:4,0:m]
arr5=arr[k:4,m:4]
print(arr2)
print(arr3)
print(arr4)
print(arr5)
sum1=np.sum(arr2)
sum2=np.sum(arr3)
sum3=np.sum(arr4)
sum4=np.sum(arr5)
print('Сумма элементов первого массива=',sum1)
print('Сумма элементов второго массива=',sum2)
print('Сумма элементов третьего массива=',sum3)
print('Сумма элементов четвертого массива=',sum4)
import numpy as np

#Задача 25
N = 7
M = 7
A = np.random.randint(0, 10, (N, M))
print(A)
bool = A == 0
col = np.sum(bool, axis=1)
A = np.insert(A, M, col, axis=1)
row = np.append(np.sum(bool, axis=0), 0)
A = np.insert(A, N, row, axis=0)
print("Новая матрица:\n" + str(A))

#Задача 26
print("_________________________________________________")
print('Задача 26')
arr = np.random.randint(0,2, size=(3,4))
print(arr)
k=2
m=2
arr2=arr[0:k,0:m]
arr3=arr[0:k,m:4]
arr4=arr[k:4,0:m]
arr5=arr[k:4,m:4]
print(arr2)
print(arr3)
print(arr4)
print(arr5)
sum1=np.average(arr2)
sum2=np.average(arr3)
sum3=np.average(arr4)
sum4=np.average(arr5)
print('Среднее значение элементов первого массива=',sum1)
print('Среднее значение элементов второго массива=',sum2)
print('Среднее значение элементов третьего массива=',sum3)
print('Среднее значение элементов четвертого массива=',sum4)

#Задача 27
import numpy as np
N = 7
M = 10
H = 4
A = np.random.randint(0, 10, (N, M))
print(A)
bool = A == H
col_sum = np.sum(bool, axis=1)
print("Строки в которых встречается значение: " + str(H))
print(np.argwhere(col_sum).flatten())
print("Строки в которых нет значения: " + str(H))
print(np.argwhere(col_sum == 0).flatten())

#Задача 28
import numpy as np
N = 7
M = 7
K = 2
A = np.random.randint(0, 10, (N, M))
print(A)
A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))
print("K = " + str(K))
A = np.delete(A, (K-1), axis=1)
print("Новая матрица:\n" + str(A))

#Задача 29
import numpy as np
N = 7
M = 7
H = 2
A = np.random.randint(0, 10, (N, M))
print(A)
bool = A == H
col_sum = np.sum(bool, axis=1)
print("Строки в которых встречается значение {}:".format(H))
print(np.argwhere(col_sum).flatten())
print("Строки в которых нет значения {}:".format(H))
print(np.argwhere(col_sum == 0).flatten())

#Задача 30
import numpy as np
N = 7
M = 7
K = 2
A = np.random.randint(0, 10, (N, M))
print(A)
M_n = np.sum(A, axis=0) * (-1)
A = np.vstack((A, M_n))
print("Новая матрица:\n" + str(A))
